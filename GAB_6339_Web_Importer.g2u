Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'Created for Monti 042921 RRC
'Mod RRC 031822
V.Global.sDir.Declare

'GSS Connection
F.ODBC.Connection!con.OpenConnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass) 
'check dirs first for web importer
Function.Intrinsic.Control.CallSub(check_dir)
'ask user to select excel file 'create table
Function.Intrinsic.Control.CallSub(get_data)
'single out parts that dne in Global Shop and create error log, create O table for web importer
Function.Intrinsic.Control.CallSub(split_data)
'create the file for the web importer
Function.Intrinsic.Control.CallSub(create_file)
'upload the files
Function.Intrinsic.Control.CallSub(upload)
'update WayBill
Function.Intrinsic.Control.CallSub(WAYBILL)
'close it down
Function.Intrinsic.Control.CallSub(unload)




F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf
Program.Sub.Main.End

Program.Sub.Check_Dir.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local..BulkDeclareString(sDir, sSubDir)
V.Local.i.Declare(Long)
V.Local.bExists.Declare(Boolean)

'Files\WEB_ORDERS 
F.Intrinsic.String.Build("{0}\WEB_ORDERS",v.Caller.FilesDir,v.Local.sDir) 
F.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExists) 
F.Intrinsic.Control.If(v.Local.bExists,=,False) 
	f.Intrinsic.File.CreateDir(v.Local.sDir) 
Function.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0}\WEB_ORDERS\{1}",v.Caller.FilesDir,V.Caller.CompanyCode,v.Global.sDir) 
F.Intrinsic.File.DirExists(v.Global.sDir,v.Local.bExists) 
F.Intrinsic.Control.If(v.Local.bExists,=,False) 
	f.Intrinsic.File.CreateDir(v.Local.sDir) 
Function.Intrinsic.Control.EndIf

F.Intrinsic.String.Split("CONVERTED*!*PART_ERRORS*!*UPLOADED*!*WEB_ERRORS","*!*",v.Local.sSubDir) 
F.Intrinsic.Control.For(v.Local.i,0,v.Local.sSubDir.UBound,1) 
	F.Intrinsic.String.Build("{0}\{1}",v.Global.sDir,v.Local.sSubDir(v.Local.i).Trim,v.Local.sSubDir(v.Local.i)) 
	f.Intrinsic.File.DirExists(v.Local.sSubDir(v.Local.i),v.Local.bExists) 
	F.Intrinsic.Control.If(v.Local.bExists,=,False) 
		f.Intrinsic.File.CreateDir(v.Local.sSubDir(v.Local.i)) 
	Function.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(v.Local.i) 

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Check_Dir.End

Program.Sub.Get_Data.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.iC.Declare(Long)
V.Local..BulkDeclareString(sFile, sData, sTypes, sFields, sTemp)

Function.Intrinsic.UI.ShowOpenFileDialog("", "*xls","",V.Local.sFile) 
F.Intrinsic.Control.If(V.Local.sFile, = ,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No File Selected")
	Function.Intrinsic.Control.CallSub(unload)
F.Intrinsic.Control.EndIf

F.Automation.MSExcel.ReadSpreadsheet(V.Local.sFile, V.Local.sData)

'delete empty rows
F.Intrinsic.String.Replace(V.Local.sData, "$!$*!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!*", "", V.Local.sData)
F.Intrinsic.String.Replace(V.Local.sData, "$!$*!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!*", "", V.Local.sData)
'V.Local.sTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
'V.Local.sFields.Set("*!**!*Markship_1*!*Markship_2*!*Waybill*!**!*Customer_PO*!*User_Field2*!*User_Field1*!**!*Part_Number*!*Part_Description*!*User_Field3*!*Price*!**!*Promised_Date*!**!*Order_Qty*!**!**!**!**!*")

V.Local.sTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
V.Local.sFields.Set("*!**!**!*Markship_1*!*Markship_2*!*Waybill*!**!*Customer_PO*!*User_Field2*!*User_Field1*!**!*Part_Number*!*Part_Description*!*User_Field3*!*Price*!**!*Promised_Date*!**!*Order_Qty*!**!**!**!**!*")
F.Data.DataTable.CreateFromString("T", V.Local.sData, V.Local.sFields , V.Local.sTypes,"*!*", "$!$", TRUE)




'remove fist 3 columns
F.Intrinsic.Control.For(V.Local.iC, 1, 3, 1)
	F.Intrinsic.String.Build("Column{0}", V.Local.iC, V.Local.sTemp)
	F.Data.DataTable.RemoveColumn("T", V.Local.sTemp)
F.Intrinsic.Control.Next(V.Local.iC)

'delete first row
F.Intrinsic.Control.For(V.Local.iC, 1, 1, 1)
	F.Data.DataTable.DeleteRow("T", 0)
F.Intrinsic.Control.Next(V.Local.iC)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf
Program.Sub.Get_Data.End

Program.Sub.Split_Data.Start

F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)


V.Local..BulkDeclareString(sRet, sPath)
V.Local..BulkDeclareLong(iC, iU)

'File Path For Parts DNE
F.Intrinsic.String.Replace(V.Ambient.Now," ", "",V.Local.sRet)
F.Intrinsic.String.Replace(V.Local.sRet,"/", "_",V.Local.sRet)
F.Intrinsic.String.Replace(V.Local.sRet,":", "_",V.Local.sRet)

F.Intrinsic.String.Build("{0}\PART_ERRORS\{1}.txt",v.Global.sDir, V.Local.sRet,V.Local.sPath)

'add column and fill from dictionary parts in GSS
'F.Data.DataTable.AddExpressionColumn("T", "PartRev", "String", "Substring(PartRevision, 4, 1) " )

F.Data.DataTable.AddColumn("T", "Part", "string")

F.Intrinsic.Control.For(V.Local.iC, 0, V.DataTable.T.RowCount--, 1)
'	Function.Intrinsic.String.GSSPARTSTRING(V.DataTable.T(V.Local.iC).PartNumber!FieldValTrim, V.DataTable.T(V.Local.iC).PartRev!FieldValTrim, V.Local.sRet)
	F.Data.DataTable.SetValue("T", V.Local.iC, "Part",V.DataTable.T(V.Local.iC).Part_Number!FieldValTrim)
F.Intrinsic.Control.Next(V.Local.iC)
F.Data.DataTable.AddColumn("T", "Part_GSS", "string")
F.Data.Dictionary.CreateFromSQL("dict", "con", "Select RTrim(Part) as PartNumber, RTrim(Part) As Part_GSS From Inventory_MSTR Order by Part")
F.Data.Dictionary.SetDefaultReturn("dict", "")
F.Data.Datatable.FillFromDictionary("T", "dict", "Part", "Part_GSS")

F.Data.Dictionary.Close("dict")
'select to view where PartGSS = ''  these parts dne in GSS
F.Data.DataView.Create("T","T_DNE", 22,  "Part_GSS =  '' ", "")
'write error file for parts
V.Local.sRet.Set("")
'why it did not work in the function we may never know
V.Local.iU.Set(V.DataView.T!T_DNE.RowCount--)
F.Intrinsic.Control.For(V.Local.iC, 0, V.Local.iU, 1)
	Function.Intrinsic.String.Build("{0}{1},{2}{3}", V.Local.sRet, V.DataView.T!T_DNE(V.Local.iC).Part_Number!FieldValTrim, V.DataView.T!T_DNE(V.Local.iC).Customer_PO!FieldValTrim,V.Ambient.NewLine,V.Local.sRet)	
F.Intrinsic.Control.Next(V.Local.iC)

F.Intrinsic.File.String2File(V.Local.sPath,V.Local.sRet)

'select to view where part exists in GSS- 
'F.Data.DataView.Create("T","T_ORDER", 22,  "Part_GSS <>  ''", "")
'select to view to all not only part exists
F.Data.DataView.Create("T","T_ORDER")
'create table from view
F.Data.DataView.ToDataTable("T","T_ORDER","Order", True)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Split_Data.End

Program.Sub.Create_File.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

Function.Intrinsic.Control.If(V.DataTable.Order.RowCount, =, 0)
	Function.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf


V.Local..BulkDeclareLong(iC, iOrder, iPo)
V.Local..BulkDeclareString(sTemp, sLine, sFilter, sFull, sOrder,sFileName, sPath, sP1, sP2, sPrice)
'create distinct orders list
Function.Data.DataView.ToDataTableDistinct("T","T_ORDER"," OrderList", "Customer_PO", True)

F.Intrinsic.Control.For(V.Local.iC, 0, V.DataTable.OrderList.RowCount--, 1)
	'select to view where order number = V.DataTable.OrderList(V.Local.iC).CustomerPO!FieldValTrim
	F.Intrinsic.String.Build("[Customer_PO] = '{0}'", V.DataTable.Order(v.Local.iC).Customer_PO!Fieldvaltrim, V.local.sFilter)
	F.Data.DataView.Create("Order", "Order_V", 22, V.Local.sFilter, "")
	'loop through to create files for orders
	F.Intrinsic.Control.For(V.Local.iOrder, 0, V.DataView.Order!Order_V.Rowcount--, 1)
	
		'customer
		F.Intrinsic.String.RPad("EATO18"," ",7, V.Local.sTemp)
		F.Intrinsic.String.Build("O{0}",V.Local.sTemp,V.Local.sLine)
		
		'order number / auto
'		F.Intrinsic.String.LPad(V.DataView.Order!Order_V(V.Local.iOrder).CustomerPO!Fieldvaltrim,"0",7, V.Local.sOrder)
'		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sOrder,V.local.sLine) 

		'order due date
		F.Intrinsic.String.RPad(v.Local.sLine," ",27,v.Local.sLine)
		V.Local.sTemp.Set(V.DataView.Order!Order_V(V.Local.iOrder).Promised_Date!Fieldvaltrim)
		F.Intrinsic.String.Format(V.Local.sTemp,"YYYYMMDD",V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.Local.sLine,V.Local.sTemp,V.Local.sLine)

		
		'order date
		F.Intrinsic.String.RPad(v.Local.sLine," ",35,v.Local.sLine)
		F.Intrinsic.String.Format(V.Ambient.Date,"YYYYMMDD",V.Local.sTemp)
		'create file name here
		F.Intrinsic.String.Build("{0}_{1}.txt",V.DataView.Order!Order_V(V.Local.iOrder).Customer_PO!Fieldvaltrim, V.Local.sTemp,V.Local.sFileName)	
		F.Intrinsic.String.Build("{0}{1}",V.Local.sLine,V.Local.sTemp,V.Local.sLine)

		'User Field 5 - This as Flag WI to Change the WAY_BILL to 001 
		F.Intrinsic.String.RPad(V.local.sLine," ",163, V.Local.sLine)
		F.Intrinsic.String.RPad("WI"," ",30, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine) 
		
		'customer PO
		F.Intrinsic.String.RPad(V.local.sLine," ",201, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).Customer_PO!Fieldvaltrim," ",15, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine) 
		
		'Mark Shipment
'		F.Intrinsic.String.RPad(V.local.sLine," ",554, V.Local.sLine)
'		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).Markship_1!Fieldvaltrim," ",30, V.Local.sTemp)
'		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine) 
		
		
		'QTY
		F.Intrinsic.String.RPad(V.local.sLine," ",705, V.Local.sLine)
		F.Intrinsic.String.Split(V.DataView.Order!Order_V(V.Local.iOrder).Order_Qty!FieldvalTrim,".",V.Local.sTemp)
		Function.Intrinsic.Control.If(v.Local.sTemp.UBound,<,1) 
			'no decimal 
			F.Intrinsic.String.LPad(V.Local.sTemp(0).Trim,"0",9,V.Local.sTemp(0)) 
			F.Intrinsic.String.RPad(V.Local.sTemp(0).Trim,"0",13,V.Local.sTemp(0)) 
		Function.Intrinsic.Control.Else 
			F.Intrinsic.String.LPad(V.Local.sTemp(0).Trim,"0",9,V.Local.sTemp(0)) 
			F.Intrinsic.String.RPad(V.Local.sTemp(1).Trim,"0",4,V.Local.sTemp(1))
			F.Intrinsic.String.Join(V.Local.sTemp,"",v.Local.sTemp)
		Function.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("{0}{1}",V.Local.sline,V.Local.sTemp,V.Local.sline)
			
		'PART	
		F.Intrinsic.String.RPad(V.Local.sLine, " ", 730, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).Part_Number!Fieldvaltrim," ",20, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
		
		'OVERRIDE PRICE
		F.Intrinsic.String.RPad(V.Local.sLine, " ", 786, V.Local.sLine)
		V.Local.sPrice.Set(V.DataView.Order!Order_V(V.Local.iOrder).Price!Fieldvaltrim)
		F.Intrinsic.String.Instr(V.Local.sPrice,".",V.Local.sTemp)
		F.Intrinsic.Control.If(V.Local.sTemp,=,0)
			F.Intrinsic.String.Build("0000000000{0}.000000",v.Local.sPrice,V.Local.sTemp)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("0000000000{0}000000",v.Local.sPrice,V.Local.sTemp)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Instr(V.Local.sTemp,".",V.Local.iPo)
		F.Intrinsic.String.Mid(V.Local.sTemp,V.Local.iPo,7,V.Local.sP2)
		F.Intrinsic.Math.Sub(V.Local.iPo,10,V.Local.iPo)
		F.Intrinsic.String.Mid(V.Local.sTemp,V.Local.iPo,10,V.Local.sP1)
		F.Intrinsic.String.Build("{0}{1}",V.Local.sP1,V.Local.sP2,V.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,".","",V.Local.sPrice)
				
		F.Intrinsic.String.RPad(V.Local.sPrice," ",16, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
		
		'PART DESCRIPTION 
		F.Intrinsic.String.RPad(V.Local.sLine, " ", 818, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).Part_Description!Fieldvaltrim," ",30, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
		
		
		'item_due date: DATE ITEM Prom
		F.Intrinsic.String.RPad(V.Local.sLine, " ", 859, V.Local.sLine)
		V.Local.sTemp.Set(V.DataView.Order!Order_V(V.Local.iOrder).Promised_Date!Fieldvaltrim)
		F.Intrinsic.String.Format(V.Local.sTemp,"YYYYMMDD",V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.Local.sLine,V.Local.sTemp,V.Local.sLine)
			
		'line data
		'user 1
		F.Intrinsic.String.RPad(V.Local.sLine, " ",867, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).User_Field1!Fieldvaltrim," ",30, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
		'user 2
		F.Intrinsic.String.RPad(V.Local.sLine, " ",897, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).User_Field2!Fieldvaltrim," ",30, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
		'user 3
		F.Intrinsic.String.RPad(V.Local.sLine, " ",927, V.Local.sLine)
		F.Intrinsic.String.RPad(V.DataView.Order!Order_V(V.Local.iOrder).User_Field3!Fieldvaltrim," ",30, V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}",V.local.sLine,V.Local.sTemp,V.local.sLine)
			
		F.Intrinsic.String.RPad(v.Local.sLine," ",4636,v.Local.sLine)
		F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sFull,V.Local.sLine,V.Ambient.NewLine,V.Local.sFull) 
	
	F.Intrinsic.Control.Next(V.Local.iOrder)	
	'close the dataview for the lines 
	F.Data.DataView.Close("Order", "Order_V")	
	'create the complete file for this order
	F.Intrinsic.String.Build("{0}\{1}",V.Global.sDir,V.Local.sFileName,V.Local.sPath)
	F.Intrinsic.File.String2File(V.Local.sPath,V.Local.sFull)
	'reset sFull
	V.Local.sFull.Set("")	
F.Intrinsic.Control.Next(V.Local.iC)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Create_File.End

Program.Sub.UPLOAD.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.sParams.Declare(String) 
'Call ORDUPL to upload sales orders created, it will process all txt files created by this program.
'if ORDUPL encounters an error, it will move the file to the ERRORS folder designated in GLOBAL\FILES\GSSPARAM.txt or GSSPARAMccc.txt

F.Intrinsic.String.Build("{0}!*!ORDUPL",V.Caller.CompanyCode,V.Local.sParams)
F.Global.General.CallWrapperSync(51,V.Local.sParams)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf
Function.Intrinsic.Control.If(V.DataTable.Order.RowCount, =, 0)
	Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.EndIf

Program.Sub.UPLOAD.End

Program.Sub.WAYBILL.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.ODBC.Connection!con.Execute("UPDATE ORDER_HEADER SET USER_5='', WAY_BILL='001' where record_type='A' AND USER_5='WI' AND CUSTOMER='EATO18';")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.WAYBILL.End

Program.Sub.Unload.Start

'close connection
Function.ODBC.Connection!con.Close
F.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.Comments.Start
${$0$}$$}$$}$12:00:00 AM$}$False
${$5$}$2.0.0.0$}$2
${$6$}$rrodriguez$}$20210603143440411$}$YnvOFTUOxTrnxbSzMvfBmnrP7dtKqN6ZKEdpzIv886oZdVylYjJwOcTDsSHKwGGVQD4KDsG+LdGs4jZV++cRfg==
Program.Sub.Comments.End